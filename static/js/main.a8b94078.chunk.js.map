{"version":3,"sources":["components/Headers/logo.svg","components/Headers/ExchangeHeader.jsx","components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","App.js","serviceWorker.js","index.js"],"names":["Logo","styled","img","Header","header","ExchangeHeader","className","src","logo","alt","Component","Section","section","Button","button","cardStyle","margin","minWidth","display","color","backgroundColor","padding","AccountBalance","props","show","showBalance","buttonText","content","amount","account","Card","style","onClick","handleHide","enableEth","Coin","TableRow","TableCell","name","align","ticker","price","balance","action","method","event","preventDefault","handleRefresh","tickerId","useStyles","makeStyles","table","CoinList","classes","TableContainer","component","Paper","Table","aria-label","TableHead","TableBody","coinData","map","key","visible","DivApp","div","insertPrice","data","find","x","id","quotes","Number","parseFloat","toFixed","App","useState","setVisible","setCoinData","accounts","setAccounts","a","window","ethereum","Web3","enable","then","request","console","log","e","web3","currentProvider","alert","useEffect","length","componentDidMount","on","Promise","all","axios","get","coinResponses","slice","coin","symbol","nKey","priceOb","newPrice","newCoinData","values","newValue","oldValue","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a8b94078.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, { Component } from 'react'\r\nimport logo from './logo.svg';\r\nimport styled from 'styled-components';\r\n\r\nconst Logo = styled.img`\r\nheight: 9rem;\r\npointer-events: none;\r\n\r\n@media (prefers-reduced-motion: no-preference) {\r\n      animation: App-logo-spin infinite 10s linear;\r\n  }\r\n  @keyframes App-logo-spin {\r\n    from {\r\n      transform: rotate(0deg);\r\n    }\r\n    to {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n\r\nconst Header = styled.header`\r\nbackground-color: #282c34;\r\nmin-height: 20vh;\r\ndisplay: flex;\r\nflex-direction: row;\r\nalign-items: center;\r\njustify-content: flex-start;\r\nfont-size: 36px;\r\ncolor: white;\r\n`; \r\n\r\n\r\nexport default class ExchangeHeader extends Component {\r\n    render() {\r\n        return (\r\n        <Header className=\"App-header\">\r\n        <Logo src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <h1>\r\n         Coin Exchange \r\n        </h1>\r\n      </Header>\r\n        \r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nconst Section = styled.section`\r\n     font-size:2rem;\r\n     text-align: left;\r\n     padding: 1.5rem 0 1.5rem 5rem;\r\n        \r\n`;\r\nconst Button = styled.button`\r\n    border: none;\r\n    color: #fff;\r\n    padding: 15px 32px;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 16px;\r\n    box-shadow: 0 2px 4px -1px rgb(0 0 0 / 20%), 0 4px 5px 0 rgb(0 0 0 / 14%), 0 1px 10px 0 rgb(0 0 0 / 12%);\r\n    background-color: #512DA8;\r\n    margin: 3px\r\n    `;\r\n\r\nconst cardStyle = {\r\nmargin: '2px 2px',\r\nminWidth: 200,\r\ndisplay:'inline-block',\r\ncolor: '#fff',\r\nbackgroundColor: '#212121',\r\npadding: '4px',\r\n\r\n};\r\n\r\nexport default function AccountBalance(props){\r\n    \r\n    \r\n        let show = props.showBalance;\r\n        const buttonText = show ? 'Hide Balance' : 'Show Balance';\r\n        let content = null;\r\n        if(show){               \r\n                content =<> Balance: ${props.amount}\r\n                            <br/>\r\n                            Account: {props.account} </>\r\n        } else {\r\n            content = <> * </> ;        }\r\n        return (\r\n            <Section>\r\n             <Card style={cardStyle}>\r\n             {content}\r\n             <br/>\r\n             <Button onClick={props.handleHide}>{buttonText}</Button> \r\n             <Button onClick={props.enableEth}>Connect MetaMask</Button>\r\n             </Card>\r\n            </Section>\r\n        )\r\n    \r\n    \r\n}\r\n\r\nAccountBalance.propTypes = {\r\n    amount: PropTypes.number.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from '@material-ui/core';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nexport default function Coin(props) {\r\n   \r\n  const handleClick = (event) => {\r\n\r\n    event.preventDefault();\r\n\r\n    props.handleRefresh(props.tickerId);\r\n   }\r\n    \r\n        return (\r\n          <TableRow>\r\n              <TableCell >{props.name}</TableCell>\r\n              <TableCell align=\"right\">{props.ticker}</TableCell>\r\n              <TableCell align=\"right\">{props.price}</TableCell>\r\n              <TableCell align=\"right\">{props.balance}</TableCell>\r\n              <TableCell align=\"right\">\r\n                  <form action=\"#\" method=\"POST\">\r\n                  <Button onClick={handleClick}>Refresh</Button>\r\n                  </form>\r\n                  </TableCell>\r\n          </TableRow>\r\n        );\r\n    \r\n}\r\n\r\nCoin.propTypes = {\r\n    tickerId: PropTypes.string.isRequired,\r\n    name : PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired\r\n}","import React from 'react'\r\nimport Coin from '../Coin/Coin';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nexport default function CoinList(props) {\r\n    \r\n  const classes = useStyles();\r\n\r\n        return (    \r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Name</TableCell>\r\n            <TableCell align=\"right\">Ticker</TableCell>\r\n            <TableCell align=\"right\">Price</TableCell>\r\n            <TableCell align=\"right\">Balance</TableCell>\r\n            <TableCell align=\"right\">Actions</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n        {\r\n        \r\n        props.coinData.map( ({key,name, ticker, price, balance}) => \r\n        <Coin key={key} \r\n              handleRefresh={props.handleRefresh}\r\n              name={name} \r\n              ticker={ticker} \r\n              price={price}\r\n              balance ={props.visible ? balance : \"*\"} \r\n              tickerId = {key}/>\r\n          )\r\n          \r\n        }\r\n        </TableBody>\r\n      </Table>\r\n      \r\n      </TableContainer>\r\n            \r\n        );\r\n}\r\n","import React from 'react';\nimport ExchangeHeader from './components/Headers/ExchangeHeader';\nimport AccountBalance from './components/AccountBalance/AccountBalance'\nimport CoinList from './components/CoinList/CoinList';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport Web3 from 'web3';\n\n\n\nconst DivApp = styled.div`\ntext-align: center;\nbackground-color: blue;\ncolor: #cccccc;\n`;\n\nconst COIN_COUNT = 30;\n\nconst formatPrice = price => Number(parseFloat(Number(price)).toFixed(4));\n\nfunction insertPrice(data, key){\n  \n   let val = data.data.find(x => x.id === key);  \n   let price = val.quotes['USD'].price;\n   \n  return Number(parseFloat(Number(price)).toFixed(4));\n  \n}\n\nfunction App(props) {\n  let web3;\n  const [balance, setBalance] = useState(10000);\n  const [visible, setVisible] = useState(true);\n  const [coinData, setCoinData] = useState([]);\n  const [accounts, setAccounts] = useState([]);\n\n  useEffect(function(){\n    if(coinData.length === 0) {\n//mount\n\ncomponentDidMount();\n    }\n    \n  });\n\n  window.ethereum.on('accountsChanged', function (accounts){\n    setAccounts(accounts);\n    console.log(\"here\");\nconsole.log(accounts);\n  });\n\n  async function ConnectMetaMask(){\n    if (window.ethereum) {\n     web3 = new Web3(window.ethereum);\n      try { \n         window.ethereum.enable().then(async function() {\n             // User has allowed account access to DApp...\n             const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n             \n             setAccounts(accounts);\n             console.log(\"there\");\n             console.log(accounts);\n         });\n      } catch(e) {\n         // User has denied account access to DApp...\n      }\n   }\n   // Legacy DApp Browsers\n   else if (window.web3) {\n       web3 = new Web3(window.web3.currentProvider);\n   }\n   // Non-DApp Browsers\n   else {\n       alert('You have to install MetaMask !');\n   }\n    \n  }\n\nconst componentDidMount = async () => {\n  \n  let coinResponses = await Promise.all([\n    axios.get('https://api.coinpaprika.com/v1/coins'),\n    axios.get('https://api.coinpaprika.com/v1/tickers')\n    \n  ]);\n let coinData = coinResponses[0].data.slice(0,COIN_COUNT).map(function(coin){\n    return {\n      key: coin.id,\n      name: coin.name,\n      ticker: coin.symbol,\n      balance: 0,\n      price: insertPrice(coinResponses[1],coin.id)   \n   };\n   \n });\n \n setCoinData(coinData);\n \n }\n   \n const handleRefresh = async (nKey) => {\n    let priceOb = await axios.get('https://api.coinpaprika.com/v1/tickers/'+nKey);\n    let newPrice = Number(parseFloat(Number(priceOb.data.quotes['USD'].price).toFixed(4)));\n     const newCoinData = coinData.map(function(values){\n        let newValue = {...values};\n        console.log(values);\n        console.log(newValue);\n        if (nKey === values.key) {\n          newValue.price = newPrice;\n        }\n       \n        return newValue;\n     });\n     setCoinData(newCoinData);\n    }\n\n    const handleHide = () => {\n      setVisible(oldValue => !oldValue)\n     }\n  \n  return (\n    <DivApp className=\"App\">\n      <ExchangeHeader/>\n      <AccountBalance amount={balance} account={accounts[0] || \"no account selected\"} showBalance={visible} handleHide={handleHide} enableEth={ConnectMetaMask}/>\n      \n      <CoinList visible={visible} coinData={coinData} handleRefresh={handleRefresh} />\n      \n    </DivApp>\n  );\n\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}