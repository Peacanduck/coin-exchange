[{"C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\index.js":"1","C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\App.js":"2","C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\serviceWorker.js":"3","C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\components\\AccountBalance\\AccountBalance.jsx":"4","C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\components\\CoinList\\CoinList.jsx":"5","C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\components\\Coin\\Coin.jsx":"6","C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\components\\Headers\\ExchangeHeader.jsx":"7","C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\components\\Menu\\Menu.jsx":"8"},{"size":520,"mtime":1625825666194,"results":"9","hashOfConfig":"10"},{"size":4884,"mtime":1689164133793,"results":"11","hashOfConfig":"10"},{"size":5086,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":1735,"mtime":1625825907116,"results":"13","hashOfConfig":"10"},{"size":2102,"mtime":1625827080562,"results":"14","hashOfConfig":"10"},{"size":1670,"mtime":1625827199339,"results":"15","hashOfConfig":"10"},{"size":939,"mtime":1625832017919,"results":"16","hashOfConfig":"10"},{"size":4757,"mtime":1626455712685,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"15lqiss",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"20"},"C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\index.js",[],["38","39"],"C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\App.js",["40","41"],"C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\serviceWorker.js",[],"C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\components\\AccountBalance\\AccountBalance.jsx",[],"C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\components\\CoinList\\CoinList.jsx",["42"],"import React from 'react'\r\nimport Coin from '../Coin/Coin';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nexport default function CoinList(props) {\r\n    \r\n  const classes = useStyles();\r\n\r\n        return (    \r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table} aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Name</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Ticker</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Price</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Balance</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Actions</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n        {\r\n        \r\n        props.coinData.map( ({key,name, ticker, price, balance}) => \r\n        <Coin key={key} \r\n              handleRefresh={props.handleRefresh}\r\n              name={name} \r\n              ticker={ticker} \r\n              price={price}\r\n              balance ={props.visible ? balance : \"*\"} \r\n              tickerId = {key}/>\r\n          )\r\n          \r\n        }\r\n        </TableBody>\r\n      </Table>\r\n      \r\n      </TableContainer>\r\n            \r\n        );\r\n}\r\n","C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\components\\Coin\\Coin.jsx",["43"],"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from '@material-ui/core';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nexport default function Coin(props) {\r\n   \r\n  const handleClick = (event) => {\r\n\r\n    event.preventDefault();\r\n\r\n    props.handleRefresh(props.tickerId);\r\n   }\r\n    \r\n        return (\r\n          <StyledTableRow>\r\n              <StyledTableCell >{props.name}</StyledTableCell>\r\n              <StyledTableCell align=\"right\">{props.ticker}</StyledTableCell>\r\n              <StyledTableCell align=\"right\">{props.price}</StyledTableCell>\r\n              <StyledTableCell align=\"right\">{props.balance}</StyledTableCell>\r\n              <StyledTableCell align=\"right\">\r\n                  <form action=\"#\" method=\"POST\">\r\n                  <Button color=\"default\" onClick={handleClick}>Refresh</Button>\r\n                  </form>\r\n                  </StyledTableCell>\r\n          </StyledTableRow>\r\n        );\r\n    \r\n}\r\n\r\nCoin.propTypes = {\r\n    tickerId: PropTypes.string.isRequired,\r\n    name : PropTypes.string.isRequired,\r\n    ticker: PropTypes.string.isRequired,\r\n    price: PropTypes.number.isRequired\r\n}","C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\components\\Headers\\ExchangeHeader.jsx",[],"C:\\Users\\jesse\\Documents\\Code\\coin-exchange\\src\\components\\Menu\\Menu.jsx",["44"],"import Avatar from '@material-ui/core/Avatar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport AssistantIcon from '@material-ui/icons/Assistant';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport clsx from 'clsx';\r\nimport React from 'react';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nexport default function MiniDrawer(props) {\r\n\r\n  const mIcons = [<AssistantIcon />, <MailIcon />, <InboxIcon />, <InboxIcon />];\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  let handleDrawer = () => {\r\n    open ? handleDrawerClose() : handleDrawerOpen();\r\n  }\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleClick = (text, event) => {\r\n    event.preventDefault();\r\n\r\n    alert(\"hi \" + text.toString());\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <IconButton onClick={handleDrawer}>\r\n            {open ? <Avatar className={classes.orange}>N</Avatar> : <Avatar className={classes.orange}>N</Avatar>}\r\n          </IconButton>\r\n        </div>\r\n\r\n        <Divider />\r\n        <MenuList>\r\n          {['Overview', 'History', 'filler', 'Drafts'].map((text, index) => (\r\n            <form action=\"#\" method=\"POST\">\r\n              <MenuItem button key={text} onClick={(e) => handleClick(text, e)} >\r\n                <ListItemIcon>{mIcons[index]}</ListItemIcon>\r\n                <ListItemText primary={text} />\r\n              </MenuItem>\r\n            </form>\r\n          ))}\r\n        </MenuList>\r\n        <Divider />\r\n        <List>\r\n          {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n            <ListItem button key={text}>\r\n              <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n              <ListItemText primary={text} />\r\n            </ListItem>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        {props.header}\r\n        {props.body}\r\n        {props.footer}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":6,"column":8,"nodeType":"51","messageId":"52","endLine":6,"endColumn":12},{"ruleId":"49","severity":1,"message":"53","line":26,"column":7,"nodeType":"51","messageId":"52","endLine":26,"endColumn":18},{"ruleId":"49","severity":1,"message":"54","line":22,"column":7,"nodeType":"51","messageId":"52","endLine":22,"endColumn":21},{"ruleId":"49","severity":1,"message":"55","line":6,"column":22,"nodeType":"51","messageId":"52","endLine":6,"endColumn":32},{"ruleId":"49","severity":1,"message":"56","line":87,"column":9,"nodeType":"51","messageId":"52","endLine":87,"endColumn":14},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'Card' is defined but never used.","Identifier","unusedVar","'formatPrice' is assigned a value but never used.","'StyledTableRow' is assigned a value but never used.","'makeStyles' is defined but never used.","'theme' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]